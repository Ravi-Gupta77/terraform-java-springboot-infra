# .github/workflows/deploy.yaml
---
name: Terraform - validation
run-name: '[${{ github.event_name }} - ${{ github.ref_name }}] Terraform executed by @${{ github.actor }}'

on:
  push:
    branches:
      - qa
      - main
    paths-ignore:
      - 'README.md'

  pull_request:
    branches:
      - main
      - qa
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  terraformVersion: 1.11.3
  terraformWorkDir: ./
  awsAccountNumber : ${{ secrets.AWS_ACCOUNT_ID }}
  terraformS3Key: ${{ secrets.AWS_ACCOUNT_ID }}/terraform-springboot-app.tfstate
  backendTerraformBucket: terraform-backend-springboot
  backendTerraformDynamo: terraform-module-state-files

  awsIamRoleSessionDuration: 3600
  awsRegion: ${{ secrets.AWS_REGION }}


jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Sets env vars 
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAccountNumber }}:role/${{ secrets.OIDC_ROLE }}" >> $GITHUB_ENV
          echo "terraformBucket=${{ env.backendTerraformBucket }}" >> $GITHUB_ENV
          echo "terraformDynamo=${{ env.backendTerraformDynamo }}" >> $GITHUB_ENV

        if: ${{ (github.ref_name == 'qa') || ( github.base_ref == 'qa') }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt --check

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -upgrade -backend=false

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform validate

  plan_apply:
    name: Terraform Plan & apply
    needs: lint
    runs-on: ubuntu-24.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ADEX_POC }}:role/Github-OIDC-role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}
          role-duration-seconds: ${{ env.awsIamRoleSessionDuration }}

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.backendTerraformBucket }}" \ 
          -backend-config="dynamodb_table=${{ env.backendTerraformDynamo }}" \
          -backend-config="key=${{ env.terraformS3Key}}" \ 
          -backend-config="region=${{ env.awsRegion }}"

      - name: Terraform Plans
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform plan -var-file=environment/terraform.tfvars -no-color -out tfplan

      - name: Stop pipeline if failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push'
        id: apply
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform apply -auto-approve  -var-file=environment/terraform.tfvars -no-color
